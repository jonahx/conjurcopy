#!/usr/bin/env bash
set -e

# This file has an implicit dependency on the environment variables defined in
# "ci/docker-compose.yml" oidc-keycloak section.

# This is executed by the main "ci/test" script after cd-ing into "ci".
# shellcheck disable=SC1091
source "./shared.sh"

main() {
  # We also run an ldap-server container for testing the OIDC & LDAP combined
  # use-case.  We can't run this use-case in a separate Jenkins step because
  # we'll have a port bind for keycloak.
  start_ldap_server
  create_keycloak_users

  # TODO: there's a dep on the docker-compose.yml volumes.
  # Fetch SSL cert to communicate with OIDC provider.
  docker-compose exec -T \
    conjur /authn-oidc/keycloak/scripts/fetchCertificate

  additional_services='ldap-server oidc-keycloak'
  _run_cucumber_tests authenticators_oidc "$additional_services" \
    _hydrate_oidc_env_args
}

# Note: the single arg is a nameref, which this function sets to an array
# containing items of the form "KEY=VAL".
_hydrate_oidc_env_args() {
  local -n arr=$1
  local keycloak_items

  readarray -t keycloak_items < <(
    set -o pipefail
    # Note: This prints all lines that look like:
    # KEYCLOAK_XXX=someval
    docker-compose exec -T oidc-keycloak printenv | awk '/KEYCLOAK/'
  )

  # shellcheck disable=SC2034
  arr=(
    "${keycloak_items[@]}"
    "PROVIDER_URI=https://keycloak:8443/auth/realms/master"
    "PROVIDER_INTERNAL_URI=http://keycloak:8080/auth/realms/master/protocol/openid-connect"
    "ID_TOKEN_USER_PROPERTY=preferred_username"
  )
}

# The arguments must be unexpanded variable names.  Eg:
#
# _create_keycloak_user '$APP_USER' '$APP_PW' '$APP_EMAIL'
#
# This is because those variables are not available to this script. They are
# available to bash commands run via "docker-compose exec oidc-keycloak bash
# -c...", since they're defined in the docker-compose.yml.
_create_keycloak_user() {
  local user_var=$1
  local pw_var=$2
  local email_var=$3

  docker-compose exec -T \
    oidc-keycloak \
    bash -c "/scripts/create_user \"$user_var\" \"$pw_var\" \"$email_var\""
}

# TODO: use wait_for_cmd
_wait_for_keycloak() {
  for i in {1..40}; do
    sleep=5
    echo "Keycloak starting logs:"

    if docker-compose logs oidc-keycloak | grep "started"; then
      echo "Keycloak server is up and ready"
      return 0
    fi

    echo "Keycloak not ready yet sleep number $i for $sleep seconds"
    sleep "$sleep"
  done

  echo "Error with keycloak server start or it is too slow"
  exit 1
}

create_keycloak_users() {
  docker-compose up --no-deps -d pg conjur oidc-keycloak
  _wait_for_keycloak

  echo "Defining oidc-keycloak client"

  docker-compose exec -T oidc-keycloak /scripts/create_client

  echo "Creating user 'alice' in Keycloak"

  # Note: We want to pass the bash command thru without expansion here.
  # shellcheck disable=SC2016
  _create_keycloak_user \
    '$KEYCLOAK_APP_USER' \
    '$KEYCLOAK_APP_USER_PASSWORD' \
    '$KEYCLOAK_APP_USER_EMAIL'

  echo "Creating second user 'bob' in Keycloak"

  # Note: We want to pass the bash command thru without expansion here.
  # shellcheck disable=SC2016
  _create_keycloak_user \
    '$KEYCLOAK_SECOND_APP_USER' \
    '$KEYCLOAK_SECOND_APP_USER_PASSWORD' \
    '$KEYCLOAK_SECOND_APP_USER_EMAIL'

  echo "Creating user in Keycloak that will not exist in conjur"

  # Note: We want to pass the bash command thru without expansion here.
  # shellcheck disable=SC2016
  _create_keycloak_user \
    '$KEYCLOAK_NON_CONJUR_APP_USER' \
    '$KEYCLOAK_NON_CONJUR_APP_USER_PASSWORD' \
    '$KEYCLOAK_NON_CONJUR_APP_USER_EMAIL'

  echo "Initialize keycloak certificate in conjur server"
}

main
